name: Deploy to DigitalOcean

on: 
  workflow_dispatch

env:
  DUCKDNS_DOMAIN: nosql

  DROPLET_NAME: nosql
  DROPLET_SIZE: s-2vcpu-2gb
  DROPLET_REGION: LON1
  DROPLET_IMAGE: ubuntu-20-04-x64 
  DROPLET_TAG: nosql

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}


      - name: Check NoSql Droplet
        run: |
          DO_ID=$(doctl compute droplet list \
                --tag-name ${{ env.DROPLET_TAG }}  \
                --no-header \
                --format ID)

          if [ -z "$DO_ID" ]
          then
              echo "NoSql Droplet does not exist. Good :-)"
          else
              echo "NoSql Droplet exists. Destroy it before execute this action!"
              exit 1
          fi

      - name: Create SSH key and publish to DigitalOcean
        id: create_ssh_id
        run: |
          ssh-keygen -N "" -f ~/digitalocean 

          SSH_KEY_PUBLIC=$(cat ~/digitalocean.pub)
          DO_SSH_KEY_ID=$(doctl compute ssh-key create github --verbose --public-key "$SSH_KEY_PUBLIC" --no-header --format ID)

          SSH_KEY=$(cat ~/digitalocean)
          SSH_KEY="${SSH_KEY//$'\n'/'%0A'}"

          echo ::set-output name=key_id::$DO_SSH_KEY_ID
          echo ::set-output name=ssh_key_private::$SSH_KEY

      - name: Collect actual SSH Keys
        id: actual_keys
        run: |
          SSH_KEYS=$(doctl compute ssh-key list --no-header --format ID |  tr '\n' ',')          
          echo ::set-output name=keys_id::"${SSH_KEYS::-1}"

      - name: Create NoSQL Droplet
        id: create_droplet
        run: |
          DO_PUBLIC_IP=$(doctl compute droplet create ${{ env.DROPLET_NAME }} \
                --image ${{ env.DROPLET_IMAGE}} \
                --region ${{ env.DROPLET_REGION }} \
                --size ${{ env.DROPLET_SIZE }} \
                --ssh-keys "${{ steps.actual_keys.outputs.keys_id }}" \
                --tag-name ${{ env.DROPLET_TAG }} \
                --wait \
                --no-header \
                --format PublicIPv4)

          echo ::set-output name=public_ip::$DO_PUBLIC_IP

      - name: Destroy SSH Key
        run: |
          doctl compute ssh-key delete ${{ steps.create_ssh_id.outputs.key_id }} --force  
          
      - name: Get latest code
        uses: actions/checkout@v2                 

      #   # We have to give some time to the droplet for starting the SSH service
      # - name: Sleeping ...
      #   run: |
      #     sleep 15

      - name: Deploy files
        uses: wlixcc/SFTP-Deploy-Action@v1.0
        with:
          username: 'root'
          server: ${{ steps.create_droplet.outputs.public_ip }}
          ssh_private_key: ${{ steps.create_ssh_id.outputs.ssh_key_private }} 
          #local_path: './static/*'
          remote_path: '/opt/deploy'
          args: '-o ConnectTimeout=10'

      # - name: Deploy NoSQL assets
      #   uses: appleboy/ssh-action@v0.1.2
      #   with:
      #     host: ${{ steps.create_droplet.outputs.public_ip }}
      #     key: ${{ steps.create_ssh_id.outputs.ssh_key_private }}
      #     username: root
     
      #     script: |
      #       git clone https://github.com/dvillaj/NoSQL-Services.git /opt/deploy
            
      #       /opt/deploy/install.sh
      #       /opt/deploy/securebox.sh

      #       curl https://www.duckdns.org/update/${{ env.DUCKDNS_DOMAIN }}/${{ secrets.DUCKDNS_TOKEN }}